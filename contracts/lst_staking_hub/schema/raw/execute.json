{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "This hook is called to unstake from the token contract. To unstake tokens, user can simply transfer the tokens to staking hub contract.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Stake the amount sent in the funds. Only staking denom fund is accepted.",
      "type": "object",
      "required": [
        "stake"
      ],
      "properties": {
        "stake": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unstake"
      ],
      "properties": {
        "unstake": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User can withdraw the amount after the unstaking process has been completed.",
      "type": "object",
      "required": [
        "withdraw_unstaked"
      ],
      "properties": {
        "withdraw_unstaked": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User can withdraw the amount after the unstaking process has been completed for specific batch IDs.",
      "type": "object",
      "required": [
        "withdraw_unstaked_for_batches"
      ],
      "properties": {
        "withdraw_unstaked_for_batches": {
          "type": "object",
          "required": [
            "batch_ids"
          ],
          "properties": {
            "batch_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin can update these parameters for configuration of the contract.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "lst_token": {
              "description": "lst token address",
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "description": "Owner of the contract",
              "type": [
                "string",
                "null"
              ]
            },
            "reward_dispatcher": {
              "description": "reward dispatcher address",
              "type": [
                "string",
                "null"
              ]
            },
            "validator_registry": {
              "description": "validator registry address",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin can update these parameters from this method",
      "type": "object",
      "required": [
        "update_params"
      ],
      "properties": {
        "update_params": {
          "type": "object",
          "properties": {
            "epoch_length": {
              "description": "Epoch length of the unstaking batch",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "pause": {
              "description": "Pause/Unpause the status of contract",
              "type": [
                "boolean",
                "null"
              ]
            },
            "unstaking_period": {
              "description": "Amount of time the chain takes for unstaking",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Check if slashing has happened. If slashing has happened, the exchange rate is updated accordingly.",
      "type": "object",
      "required": [
        "check_slashing"
      ],
      "properties": {
        "check_slashing": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This method is used to update the validators delegation from the validators registry contract. The change in validators set in registry contract is update by using this method.",
      "type": "object",
      "required": [
        "redelegate_proxy"
      ],
      "properties": {
        "redelegate_proxy": {
          "type": "object",
          "required": [
            "redelegations",
            "src_validator"
          ],
          "properties": {
            "redelegations": {
              "description": "new delegation list",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "src_validator": {
              "description": "Validator address from which delegation has to be removed",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This method is used by rewards dispatcher contract to stake the rewards accrued from staking",
      "type": "object",
      "required": [
        "stake_rewards"
      ],
      "properties": {
        "stake_rewards": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This method is open to call to update the state of the contract like exchange rate, rewards.",
      "type": "object",
      "required": [
        "update_global_index"
      ],
      "properties": {
        "update_global_index": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This method is used to process undelegations without calling the token contract. Batch is processed only if the epoch time has passed",
      "type": "object",
      "required": [
        "process_undelegations"
      ],
      "properties": {
        "process_undelegations": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This method is used to process the unstake requests that have already passed the unstaking period",
      "type": "object",
      "required": [
        "process_withdraw_requests"
      ],
      "properties": {
        "process_withdraw_requests": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
