{
  "contract_name": "lst_staking_hub",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "epoch_length",
      "staking_coin_denom",
      "unstaking_period"
    ],
    "properties": {
      "epoch_length": {
        "description": "Time to batch the unstake request in the staking hub. Should match the epoch length of chain",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "staking_coin_denom": {
        "description": "Denom to use for staking",
        "type": "string"
      },
      "unstaking_period": {
        "description": "Unstaking period of the chain",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "This hook is called to unstake from the token contract. To unstake tokens, user can simply transfer the tokens to staking hub contract.",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Stake the amount sent in the funds. Only staking denom fund is accepted.",
        "type": "object",
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "User can withdraw the amount after the unstaking process has been completed.",
        "type": "object",
        "required": [
          "withdraw_unstaked"
        ],
        "properties": {
          "withdraw_unstaked": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin can update these parameters for configuration of the contract.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "lst_token": {
                "description": "lst token address",
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner": {
                "description": "Owner of the contract",
                "type": [
                  "string",
                  "null"
                ]
              },
              "reward_dispatcher": {
                "description": "reward dispatcher address",
                "type": [
                  "string",
                  "null"
                ]
              },
              "validator_registry": {
                "description": "validator registry address",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin can update these parameters from this method",
        "type": "object",
        "required": [
          "update_params"
        ],
        "properties": {
          "update_params": {
            "type": "object",
            "properties": {
              "epoch_length": {
                "description": "Epoch length of the unstaking batch",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "pause": {
                "description": "Pause/Unpause the status of contract",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "unstaking_period": {
                "description": "Amount of time the chain takes for unstaking",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Check if slashing has happened. If slashing has happened, the exchange rate is updated accordingly.",
        "type": "object",
        "required": [
          "check_slashing"
        ],
        "properties": {
          "check_slashing": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This method is used to update the validators delegation from the validators registry contract. The change in validators set in registry contract is update by using this method.",
        "type": "object",
        "required": [
          "redelegate_proxy"
        ],
        "properties": {
          "redelegate_proxy": {
            "type": "object",
            "required": [
              "redelegations",
              "src_validator"
            ],
            "properties": {
              "redelegations": {
                "description": "new delegation list",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Coin"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "src_validator": {
                "description": "Validator address from which delegation has to be removed",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This method is used by rewards dispatcher contract to stake the rewards accrued from staking",
        "type": "object",
        "required": [
          "stake_rewards"
        ],
        "properties": {
          "stake_rewards": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This method is open to call to update the state of the contract like exchange rate, rewards.",
        "type": "object",
        "required": [
          "update_global_index"
        ],
        "properties": {
          "update_global_index": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This method is used to process undelegations without calling the token contract. Batch is processed only if the epoch time has passed",
        "type": "object",
        "required": [
          "process_undelegations"
        ],
        "properties": {
          "process_undelegations": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This method is used to process the unstake requests that have already passed the unstaking period",
        "type": "object",
        "required": [
          "process_withdraw_requests"
        ],
        "properties": {
          "process_withdraw_requests": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns the config values of the contract",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retursn the state variables in the contract",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the details of current unstaking batch",
        "type": "object",
        "required": [
          "current_batch"
        ],
        "properties": {
          "current_batch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the parameters values",
        "type": "object",
        "required": [
          "parameters"
        ],
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the current exchange rate",
        "type": "object",
        "required": [
          "exchange_rate"
        ],
        "properties": {
          "exchange_rate": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the total amount a user can withdraw from his pending unstaked requests",
        "type": "object",
        "required": [
          "withdrawable_unstaked"
        ],
        "properties": {
          "withdrawable_unstaked": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "Address of the user",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return all the unstaking requests for a user",
        "type": "object",
        "required": [
          "unstake_requests"
        ],
        "properties": {
          "unstake_requests": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "Address of the user",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the unstaking requests for a user in batches",
        "type": "object",
        "required": [
          "unstake_requests_limit"
        ],
        "properties": {
          "unstake_requests_limit": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "Address of the user",
                "type": "string"
              },
              "limit": {
                "description": "No of data to return per request",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "description": "Starting index for the history",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the unstaking requests history in batches",
        "type": "object",
        "required": [
          "all_history"
        ],
        "properties": {
          "all_history": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "No of data to return per request",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "description": "Starting index for the history",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_history": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllHistoryResponse",
      "type": "object",
      "required": [
        "history"
      ],
      "properties": {
        "history": {
          "description": "History of unstaking requests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnstakeHistory"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnstakeHistory": {
          "type": "object",
          "required": [
            "batch_id",
            "lst_applied_exchange_rate",
            "lst_token_amount",
            "lst_withdraw_rate",
            "released",
            "time"
          ],
          "properties": {
            "batch_id": {
              "description": "Batch id of the unstake request",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lst_applied_exchange_rate": {
              "description": "Exchange rate of the lst token at the time of withdrawal/slashing is applied to this rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "lst_token_amount": {
              "description": "Amount of lst token unstaked or burnt in the batch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "lst_withdraw_rate": {
              "description": "Exchange rate of the lst token at the time of unstake/burning of lst token",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "released": {
              "description": "Whether the batch is processsed/released to get updated withdraw rate",
              "type": "boolean"
            },
            "time": {
              "description": "Time at which the unstake request was made",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "lst_token": {
          "description": "LST token address",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Owner of the contract",
          "type": "string"
        },
        "reward_dispatcher_contract": {
          "description": "Reward dispatcher contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "validators_registry_contract": {
          "description": "Validator registry contract address",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "current_batch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CurrentBatch",
      "type": "object",
      "required": [
        "id",
        "requested_lst_token_amount"
      ],
      "properties": {
        "id": {
          "description": "Batch id of the current unstaking batch",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "requested_lst_token_amount": {
          "description": "Total lst token amount requested in the batch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "exchange_rate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Parameters",
      "type": "object",
      "required": [
        "epoch_length",
        "staking_coin_denom",
        "unstaking_period"
      ],
      "properties": {
        "epoch_length": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "paused": {
          "default": true,
          "type": "boolean"
        },
        "staking_coin_denom": {
          "type": "string"
        },
        "unstaking_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "State",
      "type": "object",
      "required": [
        "last_index_modification",
        "last_processed_batch",
        "last_unbonded_time",
        "lst_exchange_rate",
        "prev_hub_balance",
        "total_staked_amount"
      ],
      "properties": {
        "last_index_modification": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_processed_batch": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_unbonded_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lst_exchange_rate": {
          "$ref": "#/definitions/Decimal"
        },
        "prev_hub_balance": {
          "$ref": "#/definitions/Uint128"
        },
        "total_staked_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unstake_requests": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UnstakeRequestsResponses",
      "type": "object",
      "required": [
        "address",
        "requests"
      ],
      "properties": {
        "address": {
          "description": "Address of the user",
          "type": "string"
        },
        "requests": {
          "description": "Unstake request details for the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserUnstakeRequestsResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserUnstakeRequestsResponse": {
          "type": "object",
          "required": [
            "applied_exchange_rate",
            "batch_id",
            "lst_amount",
            "released",
            "time",
            "withdraw_exchange_rate"
          ],
          "properties": {
            "applied_exchange_rate": {
              "description": "Exchange rate of the lst token at the time of withdrawal. If released is false, it would be same as withdraw_exchange_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "batch_id": {
              "description": "Batch id",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lst_amount": {
              "description": "Amount of lst token unstaked by the user",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "released": {
              "description": "Whether the unstake request is released to get updated withdraw rate",
              "type": "boolean"
            },
            "time": {
              "description": "Time at which the unstake request was made",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "withdraw_exchange_rate": {
              "description": "Exchange rate of the lst token at the time of unstake",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "unstake_requests_limit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UnstakeRequestsResponses",
      "type": "object",
      "required": [
        "address",
        "requests"
      ],
      "properties": {
        "address": {
          "description": "Address of the user",
          "type": "string"
        },
        "requests": {
          "description": "Unstake request details for the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserUnstakeRequestsResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserUnstakeRequestsResponse": {
          "type": "object",
          "required": [
            "applied_exchange_rate",
            "batch_id",
            "lst_amount",
            "released",
            "time",
            "withdraw_exchange_rate"
          ],
          "properties": {
            "applied_exchange_rate": {
              "description": "Exchange rate of the lst token at the time of withdrawal. If released is false, it would be same as withdraw_exchange_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "batch_id": {
              "description": "Batch id",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lst_amount": {
              "description": "Amount of lst token unstaked by the user",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "released": {
              "description": "Whether the unstake request is released to get updated withdraw rate",
              "type": "boolean"
            },
            "time": {
              "description": "Time at which the unstake request was made",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "withdraw_exchange_rate": {
              "description": "Exchange rate of the lst token at the time of unstake",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "withdrawable_unstaked": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WithdrawableUnstakedResponse",
      "description": "Amount of unstaked tokens that can be withdrawn by user",
      "type": "object",
      "required": [
        "withdrawable"
      ],
      "properties": {
        "withdrawable": {
          "description": "total amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
